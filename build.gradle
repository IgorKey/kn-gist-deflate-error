plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.41'
}
repositories {
    maven { url = "https://mymavenrepo.com/repo/BP3Ud0UqOuz2moFKE7Ry/" }
    mavenCentral()
//        mavenLocal()
    jcenter()
    maven { url = "https://dl.bintray.com/kotlin/kotlin-eap" }
    maven { url = "https://kotlin.bintray.com/kotlinx" }

}
kotlin {
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    mingwX64("mingw") {
        binaries {
            executable {
                // Change to specify fully qualified name of your application's entry point:
                entryPoint = 'sample.main'
                // Specify command-line arguments, if necessary:
                runTask?.args('')
            }
        }
    }

    linuxX64("linux") {
        binaries {
            executable {
                // Change to specify fully qualified name of your application's entry point:
                entryPoint = 'sample.main'
                // Specify command-line arguments, if necessary:
                runTask?.args('')
            }
        }
        compilations.test.cinterops.create("jvmapi").defFile = file("src/nativeInterop/cinterop/x.def")
    }
    sourceSets {
        nativeMain.dependencies {

//            implementation("com.epam.drill:drill-jvmapi-native:1.3.41-$version")
        }
        // Note: To enable common source sets please comment out 'kotlin.import.noCommonSourceSets' property
        // in gradle.properties file and re-import your project in IDE.
        mingwMain {
            dependsOn nativeMain
        }
        mingwTest {
        }
        linuxMain {
            dependsOn nativeMain
            dependencies {
                implementation("com.soywiz:korio-linuxx64:1.3.41")
            }
        }
    }

}

// Use the following Gradle tasks to run your application:
// :runReleaseExecutableMingw - without debug symbols
// :runDebugExecutableMingw - with debug symbols